/*
Write a program that reads a sequence of n words and prints the k most frequent 
(in case of a tie, the smallest in alphabetical order).

Input: Input consists of several cases. Every case starts with n and k, followed by n words made up of only lowercase letters. 
       You can assume that k is between 1 and the number of different words.

Output: For every case, print the k most frequent words in order. Print first the most frequent words, and in case of a tie, 
        the smallest words in lexicographical order. Print a line with 10 dashes at the end of each case.
*/

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct most{
	string p;
	int m;
};

bool sorted(const most& a, const most& b){
	if(a.m == b.m) return a.p < b.p;
	else return a.m > b.m;
}

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct most{
	string p;
	int m;
};

bool sorted(const most& a, const most& b){
	if(a.m == b.m) return a.p < b.p;
	else return a.m > b.m;
}

                  int main(){
                    int n, k;
                    while (cin >> n >> k){

                      vector<string> s(n);
                      for(int i = 0; i < n; ++i) cin >> s[i];
                      sort(s.begin(), s.end());

                      vector<most> v(n);
                        v[0].p = s[0];
                        v[0].m = 1;
                        int j = 0;
                        for(int i = 1; i < n; ++i){
                          if(s[j] == s[i]){
                             ++v[j].m;
                             v[i].m = 0;
                          }
                          else{
                            v[i].p = s[i];
                            v[i].m = 1;
                            j = i;
                          }
                        }
                        sort(v.begin(), v.end(), sorted);
                        for(int i = 0; i < k; ++i) cout << v[i].p << endl;
                        cout << "----------" << endl;
                    }

                  }
